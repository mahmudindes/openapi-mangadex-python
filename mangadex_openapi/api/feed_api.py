# coding: utf-8

"""
    MangaDex API

    MangaDex is an ad-free manga reader offering high-quality images!  This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.  # Acceptable use policy  Usage of our services implies acceptance of the following: - You **MUST** credit us - You **MUST** credit scanlation groups if you offer the ability to read chapters - You **CANNOT** run ads or paid services on your website and/or apps  These may change at any time for any and no reason and it is up to you check for updates from time to time.  # Security issues  If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately. 

    The version of the OpenAPI document: 5.10.2
    Contact: support@mangadex.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from mangadex_openapi.models.chapter_list import ChapterList
from mangadex_openapi.models.get_chapter_order_parameter import GetChapterOrderParameter

from mangadex_openapi.api_client import ApiClient, RequestSerialized
from mangadex_openapi.api_response import ApiResponse
from mangadex_openapi.rest import RESTResponseType


class FeedApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_list_id_feed(
        self,
        id: StrictStr,
        limit: Optional[Annotated[int, Field(le=500, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        translated_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        original_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        excluded_original_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        content_rating: Optional[List[StrictStr]] = None,
        excluded_groups: Optional[List[StrictStr]] = None,
        excluded_uploaders: Optional[List[StrictStr]] = None,
        include_future_updates: Optional[StrictStr] = None,
        created_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        updated_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        publish_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        order: Optional[GetChapterOrderParameter] = None,
        includes: Optional[List[StrictStr]] = None,
        include_empty_pages: Optional[StrictInt] = None,
        include_future_publish_at: Optional[StrictInt] = None,
        include_external_url: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ChapterList:
        """CustomList Manga feed


        :param id: (required)
        :type id: str
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param translated_language:
        :type translated_language: List[str]
        :param original_language:
        :type original_language: List[str]
        :param excluded_original_language:
        :type excluded_original_language: List[str]
        :param content_rating:
        :type content_rating: List[str]
        :param excluded_groups:
        :type excluded_groups: List[str]
        :param excluded_uploaders:
        :type excluded_uploaders: List[str]
        :param include_future_updates:
        :type include_future_updates: str
        :param created_at_since:
        :type created_at_since: str
        :param updated_at_since:
        :type updated_at_since: str
        :param publish_at_since:
        :type publish_at_since: str
        :param order:
        :type order: GetChapterOrderParameter
        :param includes:
        :type includes: List[str]
        :param include_empty_pages:
        :type include_empty_pages: int
        :param include_future_publish_at:
        :type include_future_publish_at: int
        :param include_external_url:
        :type include_external_url: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_list_id_feed_serialize(
            id=id,
            limit=limit,
            offset=offset,
            translated_language=translated_language,
            original_language=original_language,
            excluded_original_language=excluded_original_language,
            content_rating=content_rating,
            excluded_groups=excluded_groups,
            excluded_uploaders=excluded_uploaders,
            include_future_updates=include_future_updates,
            created_at_since=created_at_since,
            updated_at_since=updated_at_since,
            publish_at_since=publish_at_since,
            order=order,
            includes=includes,
            include_empty_pages=include_empty_pages,
            include_future_publish_at=include_future_publish_at,
            include_external_url=include_external_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChapterList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_list_id_feed_with_http_info(
        self,
        id: StrictStr,
        limit: Optional[Annotated[int, Field(le=500, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        translated_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        original_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        excluded_original_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        content_rating: Optional[List[StrictStr]] = None,
        excluded_groups: Optional[List[StrictStr]] = None,
        excluded_uploaders: Optional[List[StrictStr]] = None,
        include_future_updates: Optional[StrictStr] = None,
        created_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        updated_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        publish_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        order: Optional[GetChapterOrderParameter] = None,
        includes: Optional[List[StrictStr]] = None,
        include_empty_pages: Optional[StrictInt] = None,
        include_future_publish_at: Optional[StrictInt] = None,
        include_external_url: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ChapterList]:
        """CustomList Manga feed


        :param id: (required)
        :type id: str
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param translated_language:
        :type translated_language: List[str]
        :param original_language:
        :type original_language: List[str]
        :param excluded_original_language:
        :type excluded_original_language: List[str]
        :param content_rating:
        :type content_rating: List[str]
        :param excluded_groups:
        :type excluded_groups: List[str]
        :param excluded_uploaders:
        :type excluded_uploaders: List[str]
        :param include_future_updates:
        :type include_future_updates: str
        :param created_at_since:
        :type created_at_since: str
        :param updated_at_since:
        :type updated_at_since: str
        :param publish_at_since:
        :type publish_at_since: str
        :param order:
        :type order: GetChapterOrderParameter
        :param includes:
        :type includes: List[str]
        :param include_empty_pages:
        :type include_empty_pages: int
        :param include_future_publish_at:
        :type include_future_publish_at: int
        :param include_external_url:
        :type include_external_url: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_list_id_feed_serialize(
            id=id,
            limit=limit,
            offset=offset,
            translated_language=translated_language,
            original_language=original_language,
            excluded_original_language=excluded_original_language,
            content_rating=content_rating,
            excluded_groups=excluded_groups,
            excluded_uploaders=excluded_uploaders,
            include_future_updates=include_future_updates,
            created_at_since=created_at_since,
            updated_at_since=updated_at_since,
            publish_at_since=publish_at_since,
            order=order,
            includes=includes,
            include_empty_pages=include_empty_pages,
            include_future_publish_at=include_future_publish_at,
            include_external_url=include_external_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChapterList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_list_id_feed_without_preload_content(
        self,
        id: StrictStr,
        limit: Optional[Annotated[int, Field(le=500, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        translated_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        original_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        excluded_original_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        content_rating: Optional[List[StrictStr]] = None,
        excluded_groups: Optional[List[StrictStr]] = None,
        excluded_uploaders: Optional[List[StrictStr]] = None,
        include_future_updates: Optional[StrictStr] = None,
        created_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        updated_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        publish_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        order: Optional[GetChapterOrderParameter] = None,
        includes: Optional[List[StrictStr]] = None,
        include_empty_pages: Optional[StrictInt] = None,
        include_future_publish_at: Optional[StrictInt] = None,
        include_external_url: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """CustomList Manga feed


        :param id: (required)
        :type id: str
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param translated_language:
        :type translated_language: List[str]
        :param original_language:
        :type original_language: List[str]
        :param excluded_original_language:
        :type excluded_original_language: List[str]
        :param content_rating:
        :type content_rating: List[str]
        :param excluded_groups:
        :type excluded_groups: List[str]
        :param excluded_uploaders:
        :type excluded_uploaders: List[str]
        :param include_future_updates:
        :type include_future_updates: str
        :param created_at_since:
        :type created_at_since: str
        :param updated_at_since:
        :type updated_at_since: str
        :param publish_at_since:
        :type publish_at_since: str
        :param order:
        :type order: GetChapterOrderParameter
        :param includes:
        :type includes: List[str]
        :param include_empty_pages:
        :type include_empty_pages: int
        :param include_future_publish_at:
        :type include_future_publish_at: int
        :param include_external_url:
        :type include_external_url: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_list_id_feed_serialize(
            id=id,
            limit=limit,
            offset=offset,
            translated_language=translated_language,
            original_language=original_language,
            excluded_original_language=excluded_original_language,
            content_rating=content_rating,
            excluded_groups=excluded_groups,
            excluded_uploaders=excluded_uploaders,
            include_future_updates=include_future_updates,
            created_at_since=created_at_since,
            updated_at_since=updated_at_since,
            publish_at_since=publish_at_since,
            order=order,
            includes=includes,
            include_empty_pages=include_empty_pages,
            include_future_publish_at=include_future_publish_at,
            include_external_url=include_external_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChapterList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_list_id_feed_serialize(
        self,
        id,
        limit,
        offset,
        translated_language,
        original_language,
        excluded_original_language,
        content_rating,
        excluded_groups,
        excluded_uploaders,
        include_future_updates,
        created_at_since,
        updated_at_since,
        publish_at_since,
        order,
        includes,
        include_empty_pages,
        include_future_publish_at,
        include_external_url,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'translatedLanguage[]': 'multi',
            'originalLanguage[]': 'multi',
            'excludedOriginalLanguage[]': 'multi',
            'contentRating[]': 'multi',
            'excludedGroups[]': 'multi',
            'excludedUploaders[]': 'multi',
            'includes[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if translated_language is not None:
            
            _query_params.append(('translatedLanguage[]', translated_language))
            
        if original_language is not None:
            
            _query_params.append(('originalLanguage[]', original_language))
            
        if excluded_original_language is not None:
            
            _query_params.append(('excludedOriginalLanguage[]', excluded_original_language))
            
        if content_rating is not None:
            
            _query_params.append(('contentRating[]', content_rating))
            
        if excluded_groups is not None:
            
            _query_params.append(('excludedGroups[]', excluded_groups))
            
        if excluded_uploaders is not None:
            
            _query_params.append(('excludedUploaders[]', excluded_uploaders))
            
        if include_future_updates is not None:
            
            _query_params.append(('includeFutureUpdates', include_future_updates))
            
        if created_at_since is not None:
            
            _query_params.append(('createdAtSince', created_at_since))
            
        if updated_at_since is not None:
            
            _query_params.append(('updatedAtSince', updated_at_since))
            
        if publish_at_since is not None:
            
            _query_params.append(('publishAtSince', publish_at_since))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if includes is not None:
            
            _query_params.append(('includes[]', includes))
            
        if include_empty_pages is not None:
            
            _query_params.append(('includeEmptyPages', include_empty_pages))
            
        if include_future_publish_at is not None:
            
            _query_params.append(('includeFuturePublishAt', include_future_publish_at))
            
        if include_external_url is not None:
            
            _query_params.append(('includeExternalUrl', include_external_url))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/list/{id}/feed',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_user_follows_manga_feed(
        self,
        limit: Optional[Annotated[int, Field(le=500, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        translated_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        original_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        excluded_original_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        content_rating: Optional[List[StrictStr]] = None,
        excluded_groups: Optional[List[StrictStr]] = None,
        excluded_uploaders: Optional[List[StrictStr]] = None,
        include_future_updates: Optional[StrictStr] = None,
        created_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        updated_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        publish_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        order: Optional[GetChapterOrderParameter] = None,
        includes: Optional[List[StrictStr]] = None,
        include_empty_pages: Optional[StrictInt] = None,
        include_future_publish_at: Optional[StrictInt] = None,
        include_external_url: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ChapterList:
        """Get logged User followed Manga feed (Chapter list)


        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param translated_language:
        :type translated_language: List[str]
        :param original_language:
        :type original_language: List[str]
        :param excluded_original_language:
        :type excluded_original_language: List[str]
        :param content_rating:
        :type content_rating: List[str]
        :param excluded_groups:
        :type excluded_groups: List[str]
        :param excluded_uploaders:
        :type excluded_uploaders: List[str]
        :param include_future_updates:
        :type include_future_updates: str
        :param created_at_since:
        :type created_at_since: str
        :param updated_at_since:
        :type updated_at_since: str
        :param publish_at_since:
        :type publish_at_since: str
        :param order:
        :type order: GetChapterOrderParameter
        :param includes:
        :type includes: List[str]
        :param include_empty_pages:
        :type include_empty_pages: int
        :param include_future_publish_at:
        :type include_future_publish_at: int
        :param include_external_url:
        :type include_external_url: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_user_follows_manga_feed_serialize(
            limit=limit,
            offset=offset,
            translated_language=translated_language,
            original_language=original_language,
            excluded_original_language=excluded_original_language,
            content_rating=content_rating,
            excluded_groups=excluded_groups,
            excluded_uploaders=excluded_uploaders,
            include_future_updates=include_future_updates,
            created_at_since=created_at_since,
            updated_at_since=updated_at_since,
            publish_at_since=publish_at_since,
            order=order,
            includes=includes,
            include_empty_pages=include_empty_pages,
            include_future_publish_at=include_future_publish_at,
            include_external_url=include_external_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChapterList",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_user_follows_manga_feed_with_http_info(
        self,
        limit: Optional[Annotated[int, Field(le=500, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        translated_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        original_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        excluded_original_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        content_rating: Optional[List[StrictStr]] = None,
        excluded_groups: Optional[List[StrictStr]] = None,
        excluded_uploaders: Optional[List[StrictStr]] = None,
        include_future_updates: Optional[StrictStr] = None,
        created_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        updated_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        publish_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        order: Optional[GetChapterOrderParameter] = None,
        includes: Optional[List[StrictStr]] = None,
        include_empty_pages: Optional[StrictInt] = None,
        include_future_publish_at: Optional[StrictInt] = None,
        include_external_url: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ChapterList]:
        """Get logged User followed Manga feed (Chapter list)


        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param translated_language:
        :type translated_language: List[str]
        :param original_language:
        :type original_language: List[str]
        :param excluded_original_language:
        :type excluded_original_language: List[str]
        :param content_rating:
        :type content_rating: List[str]
        :param excluded_groups:
        :type excluded_groups: List[str]
        :param excluded_uploaders:
        :type excluded_uploaders: List[str]
        :param include_future_updates:
        :type include_future_updates: str
        :param created_at_since:
        :type created_at_since: str
        :param updated_at_since:
        :type updated_at_since: str
        :param publish_at_since:
        :type publish_at_since: str
        :param order:
        :type order: GetChapterOrderParameter
        :param includes:
        :type includes: List[str]
        :param include_empty_pages:
        :type include_empty_pages: int
        :param include_future_publish_at:
        :type include_future_publish_at: int
        :param include_external_url:
        :type include_external_url: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_user_follows_manga_feed_serialize(
            limit=limit,
            offset=offset,
            translated_language=translated_language,
            original_language=original_language,
            excluded_original_language=excluded_original_language,
            content_rating=content_rating,
            excluded_groups=excluded_groups,
            excluded_uploaders=excluded_uploaders,
            include_future_updates=include_future_updates,
            created_at_since=created_at_since,
            updated_at_since=updated_at_since,
            publish_at_since=publish_at_since,
            order=order,
            includes=includes,
            include_empty_pages=include_empty_pages,
            include_future_publish_at=include_future_publish_at,
            include_external_url=include_external_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChapterList",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_user_follows_manga_feed_without_preload_content(
        self,
        limit: Optional[Annotated[int, Field(le=500, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        translated_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        original_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        excluded_original_language: Optional[List[Annotated[str, Field(strict=True)]]] = None,
        content_rating: Optional[List[StrictStr]] = None,
        excluded_groups: Optional[List[StrictStr]] = None,
        excluded_uploaders: Optional[List[StrictStr]] = None,
        include_future_updates: Optional[StrictStr] = None,
        created_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        updated_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        publish_at_since: Optional[Annotated[str, Field(strict=True)]] = None,
        order: Optional[GetChapterOrderParameter] = None,
        includes: Optional[List[StrictStr]] = None,
        include_empty_pages: Optional[StrictInt] = None,
        include_future_publish_at: Optional[StrictInt] = None,
        include_external_url: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get logged User followed Manga feed (Chapter list)


        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param translated_language:
        :type translated_language: List[str]
        :param original_language:
        :type original_language: List[str]
        :param excluded_original_language:
        :type excluded_original_language: List[str]
        :param content_rating:
        :type content_rating: List[str]
        :param excluded_groups:
        :type excluded_groups: List[str]
        :param excluded_uploaders:
        :type excluded_uploaders: List[str]
        :param include_future_updates:
        :type include_future_updates: str
        :param created_at_since:
        :type created_at_since: str
        :param updated_at_since:
        :type updated_at_since: str
        :param publish_at_since:
        :type publish_at_since: str
        :param order:
        :type order: GetChapterOrderParameter
        :param includes:
        :type includes: List[str]
        :param include_empty_pages:
        :type include_empty_pages: int
        :param include_future_publish_at:
        :type include_future_publish_at: int
        :param include_external_url:
        :type include_external_url: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_user_follows_manga_feed_serialize(
            limit=limit,
            offset=offset,
            translated_language=translated_language,
            original_language=original_language,
            excluded_original_language=excluded_original_language,
            content_rating=content_rating,
            excluded_groups=excluded_groups,
            excluded_uploaders=excluded_uploaders,
            include_future_updates=include_future_updates,
            created_at_since=created_at_since,
            updated_at_since=updated_at_since,
            publish_at_since=publish_at_since,
            order=order,
            includes=includes,
            include_empty_pages=include_empty_pages,
            include_future_publish_at=include_future_publish_at,
            include_external_url=include_external_url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChapterList",
            '400': "ErrorResponse",
            '404': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_user_follows_manga_feed_serialize(
        self,
        limit,
        offset,
        translated_language,
        original_language,
        excluded_original_language,
        content_rating,
        excluded_groups,
        excluded_uploaders,
        include_future_updates,
        created_at_since,
        updated_at_since,
        publish_at_since,
        order,
        includes,
        include_empty_pages,
        include_future_publish_at,
        include_external_url,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'translatedLanguage[]': 'multi',
            'originalLanguage[]': 'multi',
            'excludedOriginalLanguage[]': 'multi',
            'contentRating[]': 'multi',
            'excludedGroups[]': 'multi',
            'excludedUploaders[]': 'multi',
            'includes[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if translated_language is not None:
            
            _query_params.append(('translatedLanguage[]', translated_language))
            
        if original_language is not None:
            
            _query_params.append(('originalLanguage[]', original_language))
            
        if excluded_original_language is not None:
            
            _query_params.append(('excludedOriginalLanguage[]', excluded_original_language))
            
        if content_rating is not None:
            
            _query_params.append(('contentRating[]', content_rating))
            
        if excluded_groups is not None:
            
            _query_params.append(('excludedGroups[]', excluded_groups))
            
        if excluded_uploaders is not None:
            
            _query_params.append(('excludedUploaders[]', excluded_uploaders))
            
        if include_future_updates is not None:
            
            _query_params.append(('includeFutureUpdates', include_future_updates))
            
        if created_at_since is not None:
            
            _query_params.append(('createdAtSince', created_at_since))
            
        if updated_at_since is not None:
            
            _query_params.append(('updatedAtSince', updated_at_since))
            
        if publish_at_since is not None:
            
            _query_params.append(('publishAtSince', publish_at_since))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if includes is not None:
            
            _query_params.append(('includes[]', includes))
            
        if include_empty_pages is not None:
            
            _query_params.append(('includeEmptyPages', include_empty_pages))
            
        if include_future_publish_at is not None:
            
            _query_params.append(('includeFuturePublishAt', include_future_publish_at))
            
        if include_external_url is not None:
            
            _query_params.append(('includeExternalUrl', include_external_url))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/user/follows/manga/feed',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


