# coding: utf-8

"""
    MangaDex API

    MangaDex is an ad-free manga reader offering high-quality images!  This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.  # Acceptable use policy  Usage of our services implies acceptance of the following: - You **MUST** credit us - You **MUST** credit scanlation groups if you offer the ability to read chapters - You **CANNOT** run ads or paid services on your website and/or apps  These may change at any time for any and no reason and it is up to you check for updates from time to time.  # Security issues  If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately. 

    The version of the OpenAPI document: 5.10.2
    Contact: support@mangadex.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ChapterDraft(BaseModel):
    """
    ChapterDraft
    """ # noqa: E501
    volume: Optional[Annotated[str, Field(strict=True, max_length=8)]]
    chapter: Optional[Annotated[str, Field(strict=True, max_length=8)]]
    title: Optional[Annotated[str, Field(strict=True, max_length=255)]]
    translated_language: Annotated[str, Field(strict=True)] = Field(alias="translatedLanguage")
    external_url: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, alias="externalUrl")
    publish_at: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="publishAt")
    __properties: ClassVar[List[str]] = ["volume", "chapter", "title", "translatedLanguage", "externalUrl", "publishAt"]

    @field_validator('volume')
    def volume_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^((0|[1-9]\d*)(\.\d+)?[a-z]?)?$", value):
            raise ValueError(r"must validate the regular expression /^((0|[1-9]\d*)(\.\d+)?[a-z]?)?$/")
        return value

    @field_validator('chapter')
    def chapter_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^((0|[1-9]\d*)(\.\d+)?[a-z]?)?$", value):
            raise ValueError(r"must validate the regular expression /^((0|[1-9]\d*)(\.\d+)?[a-z]?)?$/")
        return value

    @field_validator('translated_language')
    def translated_language_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z]{2}(-[a-z]{2})?$", value):
            raise ValueError(r"must validate the regular expression /^[a-z]{2}(-[a-z]{2})?$/")
        return value

    @field_validator('external_url')
    def external_url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\//")
        return value

    @field_validator('publish_at')
    def publish_at_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$", value):
            raise ValueError(r"must validate the regular expression /^\d{4}-[0-1]\d-([0-2]\d|3[0-1])T([0-1]\d|2[0-3]):[0-5]\d:[0-5]\d$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChapterDraft from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if volume (nullable) is None
        # and model_fields_set contains the field
        if self.volume is None and "volume" in self.model_fields_set:
            _dict['volume'] = None

        # set to None if chapter (nullable) is None
        # and model_fields_set contains the field
        if self.chapter is None and "chapter" in self.model_fields_set:
            _dict['chapter'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if external_url (nullable) is None
        # and model_fields_set contains the field
        if self.external_url is None and "external_url" in self.model_fields_set:
            _dict['externalUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChapterDraft from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "volume": obj.get("volume"),
            "chapter": obj.get("chapter"),
            "title": obj.get("title"),
            "translatedLanguage": obj.get("translatedLanguage"),
            "externalUrl": obj.get("externalUrl"),
            "publishAt": obj.get("publishAt")
        })
        return _obj


