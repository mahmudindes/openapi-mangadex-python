# coding: utf-8

"""
    MangaDex API

    MangaDex is an ad-free manga reader offering high-quality images!  This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.  # Acceptable use policy  Usage of our services implies acceptance of the following: - You **MUST** credit us - You **MUST** credit scanlation groups if you offer the ability to read chapters - You **CANNOT** run ads or paid services on your website and/or apps  These may change at any time for any and no reason and it is up to you check for updates from time to time.  # Security issues  If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately. 

    The version of the OpenAPI document: 5.10.2
    Contact: support@mangadex.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateScanlationGroup(BaseModel):
    """
    CreateScanlationGroup
    """ # noqa: E501
    name: StrictStr
    website: Optional[StrictStr] = None
    irc_server: Optional[StrictStr] = Field(default=None, alias="ircServer")
    irc_channel: Optional[StrictStr] = Field(default=None, alias="ircChannel")
    discord: Optional[StrictStr] = None
    contact_email: Optional[StrictStr] = Field(default=None, alias="contactEmail")
    description: Optional[StrictStr] = None
    twitter: Optional[Annotated[str, Field(strict=True)]] = None
    manga_updates: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, alias="mangaUpdates")
    inactive: Optional[StrictBool] = None
    publish_delay: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="publishDelay")
    __properties: ClassVar[List[str]] = ["name", "website", "ircServer", "ircChannel", "discord", "contactEmail", "description", "twitter", "mangaUpdates", "inactive", "publishDelay"]

    @field_validator('twitter')
    def twitter_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/twitter\.com", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/twitter\.com/")
        return value

    @field_validator('manga_updates')
    def manga_updates_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https:\/\/www\.mangaupdates\.com\/(group|publisher)(s\.html\?id=\d+|\/[\w-]+\/?([\w-]+)?(\/)?)$", value):
            raise ValueError(r"must validate the regular expression /^https:\/\/www\.mangaupdates\.com\/(group|publisher)(s\.html\?id=\d+|\/[\w-]+\/?([\w-]+)?(\/)?)$/")
        return value

    @field_validator('publish_delay')
    def publish_delay_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^P(([1-9]|[1-9][0-9])D)?(([1-9])W)?(T(([1-9]|1[0-9]|2[0-4])H)?(([1-9]|[1-5][0-9]|60)M)?(([1-9]|[1-5][0-9]|60)S)?)?$", value):
            raise ValueError(r"must validate the regular expression /^P(([1-9]|[1-9][0-9])D)?(([1-9])W)?(T(([1-9]|1[0-9]|2[0-4])H)?(([1-9]|[1-5][0-9]|60)M)?(([1-9]|[1-5][0-9]|60)S)?)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateScanlationGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['website'] = None

        # set to None if irc_server (nullable) is None
        # and model_fields_set contains the field
        if self.irc_server is None and "irc_server" in self.model_fields_set:
            _dict['ircServer'] = None

        # set to None if irc_channel (nullable) is None
        # and model_fields_set contains the field
        if self.irc_channel is None and "irc_channel" in self.model_fields_set:
            _dict['ircChannel'] = None

        # set to None if discord (nullable) is None
        # and model_fields_set contains the field
        if self.discord is None and "discord" in self.model_fields_set:
            _dict['discord'] = None

        # set to None if contact_email (nullable) is None
        # and model_fields_set contains the field
        if self.contact_email is None and "contact_email" in self.model_fields_set:
            _dict['contactEmail'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if twitter (nullable) is None
        # and model_fields_set contains the field
        if self.twitter is None and "twitter" in self.model_fields_set:
            _dict['twitter'] = None

        # set to None if manga_updates (nullable) is None
        # and model_fields_set contains the field
        if self.manga_updates is None and "manga_updates" in self.model_fields_set:
            _dict['mangaUpdates'] = None

        # set to None if publish_delay (nullable) is None
        # and model_fields_set contains the field
        if self.publish_delay is None and "publish_delay" in self.model_fields_set:
            _dict['publishDelay'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateScanlationGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "website": obj.get("website"),
            "ircServer": obj.get("ircServer"),
            "ircChannel": obj.get("ircChannel"),
            "discord": obj.get("discord"),
            "contactEmail": obj.get("contactEmail"),
            "description": obj.get("description"),
            "twitter": obj.get("twitter"),
            "mangaUpdates": obj.get("mangaUpdates"),
            "inactive": obj.get("inactive"),
            "publishDelay": obj.get("publishDelay")
        })
        return _obj


