# coding: utf-8

"""
    MangaDex API

    MangaDex is an ad-free manga reader offering high-quality images!  This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.  # Acceptable use policy  Usage of our services implies acceptance of the following: - You **MUST** credit us - You **MUST** credit scanlation groups if you offer the ability to read chapters - You **CANNOT** run ads or paid services on your website and/or apps  These may change at any time for any and no reason and it is up to you check for updates from time to time.  # Security issues  If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately. 

    The version of the OpenAPI document: 5.10.2
    Contact: support@mangadex.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AuthorCreate(BaseModel):
    """
    AuthorCreate
    """ # noqa: E501
    name: StrictStr
    biography: Optional[Dict[str, Annotated[str, Field(strict=True)]]] = None
    twitter: Optional[Annotated[str, Field(strict=True)]] = None
    pixiv: Optional[Annotated[str, Field(strict=True)]] = None
    melon_book: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="melonBook")
    fan_box: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="fanBox")
    booth: Optional[Annotated[str, Field(strict=True)]] = None
    nico_video: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="nicoVideo")
    skeb: Optional[Annotated[str, Field(strict=True)]] = None
    fantia: Optional[Annotated[str, Field(strict=True)]] = None
    tumblr: Optional[Annotated[str, Field(strict=True)]] = None
    youtube: Optional[Annotated[str, Field(strict=True)]] = None
    weibo: Optional[Annotated[str, Field(strict=True)]] = None
    naver: Optional[Annotated[str, Field(strict=True)]] = None
    website: Optional[Annotated[str, Field(strict=True)]] = None
    __properties: ClassVar[List[str]] = ["name", "biography", "twitter", "pixiv", "melonBook", "fanBox", "booth", "nicoVideo", "skeb", "fantia", "tumblr", "youtube", "weibo", "naver", "website"]

    @field_validator('twitter')
    def twitter_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/twitter\.com(\/|$)", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/twitter\.com(\/|$)/")
        return value

    @field_validator('pixiv')
    def pixiv_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/([\w-]+\.)?pixiv\.net(\/|$)", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/([\w-]+\.)?pixiv\.net(\/|$)/")
        return value

    @field_validator('melon_book')
    def melon_book_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/([\w-]+\.)?melonbooks\.co\.jp(\/|$)", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/([\w-]+\.)?melonbooks\.co\.jp(\/|$)/")
        return value

    @field_validator('fan_box')
    def fan_box_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/([\w-]+\.)?fanbox\.cc(\/|$)", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/([\w-]+\.)?fanbox\.cc(\/|$)/")
        return value

    @field_validator('booth')
    def booth_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/([\w-]+\.)?booth\.pm(\/|$)", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/([\w-]+\.)?booth\.pm(\/|$)/")
        return value

    @field_validator('nico_video')
    def nico_video_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/([\w-]+\.)?nicovideo\.jp(\/|$)", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/([\w-]+\.)?nicovideo\.jp(\/|$)/")
        return value

    @field_validator('skeb')
    def skeb_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/([\w-]+\.)?skeb\.jp(\/|$)", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/([\w-]+\.)?skeb\.jp(\/|$)/")
        return value

    @field_validator('fantia')
    def fantia_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/([\w-]+\.)?fantia\.jp(\/|$)", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/([\w-]+\.)?fantia\.jp(\/|$)/")
        return value

    @field_validator('tumblr')
    def tumblr_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/([\w-]+\.)?tumblr\.com(\/|$)", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/([\w-]+\.)?tumblr\.com(\/|$)/")
        return value

    @field_validator('youtube')
    def youtube_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/www\.youtube\.com(\/|$)", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/www\.youtube\.com(\/|$)/")
        return value

    @field_validator('weibo')
    def weibo_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/([\w-]+\.)?weibo\.(cn|com)(\/|$)", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/([\w-]+\.)?weibo\.(cn|com)(\/|$)/")
        return value

    @field_validator('naver')
    def naver_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/([\w-]+\.)?naver\.com(\/|$)", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\/([\w-]+\.)?naver\.com(\/|$)/")
        return value

    @field_validator('website')
    def website_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https?:\/\/", value):
            raise ValueError(r"must validate the regular expression /^https?:\/\//")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthorCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if twitter (nullable) is None
        # and model_fields_set contains the field
        if self.twitter is None and "twitter" in self.model_fields_set:
            _dict['twitter'] = None

        # set to None if pixiv (nullable) is None
        # and model_fields_set contains the field
        if self.pixiv is None and "pixiv" in self.model_fields_set:
            _dict['pixiv'] = None

        # set to None if melon_book (nullable) is None
        # and model_fields_set contains the field
        if self.melon_book is None and "melon_book" in self.model_fields_set:
            _dict['melonBook'] = None

        # set to None if fan_box (nullable) is None
        # and model_fields_set contains the field
        if self.fan_box is None and "fan_box" in self.model_fields_set:
            _dict['fanBox'] = None

        # set to None if booth (nullable) is None
        # and model_fields_set contains the field
        if self.booth is None and "booth" in self.model_fields_set:
            _dict['booth'] = None

        # set to None if nico_video (nullable) is None
        # and model_fields_set contains the field
        if self.nico_video is None and "nico_video" in self.model_fields_set:
            _dict['nicoVideo'] = None

        # set to None if skeb (nullable) is None
        # and model_fields_set contains the field
        if self.skeb is None and "skeb" in self.model_fields_set:
            _dict['skeb'] = None

        # set to None if fantia (nullable) is None
        # and model_fields_set contains the field
        if self.fantia is None and "fantia" in self.model_fields_set:
            _dict['fantia'] = None

        # set to None if tumblr (nullable) is None
        # and model_fields_set contains the field
        if self.tumblr is None and "tumblr" in self.model_fields_set:
            _dict['tumblr'] = None

        # set to None if youtube (nullable) is None
        # and model_fields_set contains the field
        if self.youtube is None and "youtube" in self.model_fields_set:
            _dict['youtube'] = None

        # set to None if weibo (nullable) is None
        # and model_fields_set contains the field
        if self.weibo is None and "weibo" in self.model_fields_set:
            _dict['weibo'] = None

        # set to None if naver (nullable) is None
        # and model_fields_set contains the field
        if self.naver is None and "naver" in self.model_fields_set:
            _dict['naver'] = None

        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['website'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthorCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "biography": obj.get("biography"),
            "twitter": obj.get("twitter"),
            "pixiv": obj.get("pixiv"),
            "melonBook": obj.get("melonBook"),
            "fanBox": obj.get("fanBox"),
            "booth": obj.get("booth"),
            "nicoVideo": obj.get("nicoVideo"),
            "skeb": obj.get("skeb"),
            "fantia": obj.get("fantia"),
            "tumblr": obj.get("tumblr"),
            "youtube": obj.get("youtube"),
            "weibo": obj.get("weibo"),
            "naver": obj.get("naver"),
            "website": obj.get("website")
        })
        return _obj


