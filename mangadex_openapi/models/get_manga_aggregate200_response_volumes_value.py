# coding: utf-8

"""
    MangaDex API

    MangaDex is an ad-free manga reader offering high-quality images!  This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.  # Acceptable use policy  Usage of our services implies acceptance of the following: - You **MUST** credit us - You **MUST** credit scanlation groups if you offer the ability to read chapters - You **CANNOT** run ads or paid services on your website and/or apps  These may change at any time for any and no reason and it is up to you check for updates from time to time.  # Security issues  If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately. 

    The version of the OpenAPI document: 5.10.2
    Contact: support@mangadex.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from mangadex_openapi.models.get_manga_aggregate200_response_volumes_value_chapters_value import GetMangaAggregate200ResponseVolumesValueChaptersValue
from typing import Optional, Set
from typing_extensions import Self

class GetMangaAggregate200ResponseVolumesValue(BaseModel):
    """
    GetMangaAggregate200ResponseVolumesValue
    """ # noqa: E501
    volume: Optional[StrictStr] = None
    count: Optional[StrictInt] = None
    chapters: Optional[Dict[str, GetMangaAggregate200ResponseVolumesValueChaptersValue]] = None
    __properties: ClassVar[List[str]] = ["volume", "count", "chapters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMangaAggregate200ResponseVolumesValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in chapters (dict)
        _field_dict = {}
        if self.chapters:
            for _key in self.chapters:
                if self.chapters[_key]:
                    _field_dict[_key] = self.chapters[_key].to_dict()
            _dict['chapters'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMangaAggregate200ResponseVolumesValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "volume": obj.get("volume"),
            "count": obj.get("count"),
            "chapters": dict(
                (_k, GetMangaAggregate200ResponseVolumesValueChaptersValue.from_dict(_v))
                for _k, _v in obj["chapters"].items()
            )
            if obj.get("chapters") is not None
            else None
        })
        return _obj


