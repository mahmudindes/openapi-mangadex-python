# coding: utf-8

"""
    MangaDex API

    MangaDex is an ad-free manga reader offering high-quality images!  This document details our API as it is right now. It is in no way a promise to never change it, although we will endeavour to publicly notify any major change.  # Acceptable use policy  Usage of our services implies acceptance of the following: - You **MUST** credit us - You **MUST** credit scanlation groups if you offer the ability to read chapters - You **CANNOT** run ads or paid services on your website and/or apps  These may change at any time for any and no reason and it is up to you check for updates from time to time.  # Security issues  If you believe you found a security issue in our API, please check our [security.txt](/security.txt) to get in touch privately. 

    The version of the OpenAPI document: 5.10.2
    Contact: support@mangadex.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PutMangaIdRequest(BaseModel):
    """
    PutMangaIdRequest
    """ # noqa: E501
    title: Optional[Dict[str, Annotated[str, Field(strict=True)]]] = None
    alt_titles: Optional[List[Dict[str, Annotated[str, Field(strict=True)]]]] = Field(default=None, alias="altTitles")
    description: Optional[Dict[str, Annotated[str, Field(strict=True)]]] = None
    authors: Optional[List[Annotated[str, Field(min_length=36, strict=True, max_length=36)]]] = None
    artists: Optional[List[Annotated[str, Field(min_length=36, strict=True, max_length=36)]]] = None
    links: Optional[Dict[str, StrictStr]] = None
    original_language: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="originalLanguage")
    last_volume: Optional[StrictStr] = Field(default=None, alias="lastVolume")
    last_chapter: Optional[StrictStr] = Field(default=None, alias="lastChapter")
    publication_demographic: Optional[StrictStr] = Field(default=None, alias="publicationDemographic")
    status: Optional[StrictStr] = None
    year: Optional[Annotated[int, Field(le=9999, strict=True, ge=1)]] = Field(default=None, description="Year of release")
    content_rating: Optional[StrictStr] = Field(default=None, alias="contentRating")
    chapter_numbers_reset_on_new_volume: Optional[StrictBool] = Field(default=None, alias="chapterNumbersResetOnNewVolume")
    tags: Optional[List[StrictStr]] = None
    primary_cover: Optional[StrictStr] = Field(default=None, alias="primaryCover")
    version: Annotated[int, Field(strict=True, ge=1)]
    __properties: ClassVar[List[str]] = ["title", "altTitles", "description", "authors", "artists", "links", "originalLanguage", "lastVolume", "lastChapter", "publicationDemographic", "status", "year", "contentRating", "chapterNumbersResetOnNewVolume", "tags", "primaryCover", "version"]

    @field_validator('original_language')
    def original_language_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z]{2}(-[a-z]{2})?$", value):
            raise ValueError(r"must validate the regular expression /^[a-z]{2}(-[a-z]{2})?$/")
        return value

    @field_validator('publication_demographic')
    def publication_demographic_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['shounen', 'shoujo', 'josei', 'seinen']):
            raise ValueError("must be one of enum values ('shounen', 'shoujo', 'josei', 'seinen')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['completed', 'ongoing', 'cancelled', 'hiatus']):
            raise ValueError("must be one of enum values ('completed', 'ongoing', 'cancelled', 'hiatus')")
        return value

    @field_validator('content_rating')
    def content_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['safe', 'suggestive', 'erotica', 'pornographic']):
            raise ValueError("must be one of enum values ('safe', 'suggestive', 'erotica', 'pornographic')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutMangaIdRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if last_volume (nullable) is None
        # and model_fields_set contains the field
        if self.last_volume is None and "last_volume" in self.model_fields_set:
            _dict['lastVolume'] = None

        # set to None if last_chapter (nullable) is None
        # and model_fields_set contains the field
        if self.last_chapter is None and "last_chapter" in self.model_fields_set:
            _dict['lastChapter'] = None

        # set to None if publication_demographic (nullable) is None
        # and model_fields_set contains the field
        if self.publication_demographic is None and "publication_demographic" in self.model_fields_set:
            _dict['publicationDemographic'] = None

        # set to None if year (nullable) is None
        # and model_fields_set contains the field
        if self.year is None and "year" in self.model_fields_set:
            _dict['year'] = None

        # set to None if primary_cover (nullable) is None
        # and model_fields_set contains the field
        if self.primary_cover is None and "primary_cover" in self.model_fields_set:
            _dict['primaryCover'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutMangaIdRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "altTitles": obj.get("altTitles"),
            "description": obj.get("description"),
            "authors": obj.get("authors"),
            "artists": obj.get("artists"),
            "links": obj.get("links"),
            "originalLanguage": obj.get("originalLanguage"),
            "lastVolume": obj.get("lastVolume"),
            "lastChapter": obj.get("lastChapter"),
            "publicationDemographic": obj.get("publicationDemographic"),
            "status": obj.get("status"),
            "year": obj.get("year"),
            "contentRating": obj.get("contentRating"),
            "chapterNumbersResetOnNewVolume": obj.get("chapterNumbersResetOnNewVolume"),
            "tags": obj.get("tags"),
            "primaryCover": obj.get("primaryCover"),
            "version": obj.get("version")
        })
        return _obj


